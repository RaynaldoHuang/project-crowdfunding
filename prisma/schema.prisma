// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  MEMBER
  ADMIN
}

enum Status {
  ONGOING
  PENDING
  CANCELED
  FINISHED
}


model Account {
  id            Int             @id @default(autoincrement())
  
  username      String          @unique
  email         String          
  password      String          
  role          Role            @default(MEMBER)

  // One to one -> Profile
  profile       Profile?
}


model Profile {
  id                  String        @id @default(uuid())
  
  accountUsername     String        @unique
  username            Account       @relation(fields: [accountUsername], references: [username])

  campaign            Campaign[]
  campaignId          String?

  firstName           String        @default("")
  lastName            String        @default("")
  city                String        @default("")
  birthdate           DateTime      @default(now())
  address             String        @default("")
  phoneNumber         String        @default("")

  gender              Gender        @default(MALE)

  createdDate         DateTime      @default(now())
}

model Campaign {
  id                  String        @id @unique @default(uuid())

  profile             Profile       @relation(fields: [profileId], references: [id])
  profileId           String

  campaignImage       CampaignImage[]

  news                News[]

  eventName           String        
  eventDescription    String
  fundsNeeded         Int           
  fundsAccumulated    Int           @default(0)
  deadline            DateTime
  createdDate         DateTime      @default(now())

  status              Status        @default(PENDING)
}

model CampaignImage {
  id                  Int           @id @default(autoincrement())

  campaign            Campaign      @relation(fields: [campaignId], references: [id])
  campaignId          String

  imageLink           String
}

model News {
  id                  Int          @id @default(autoincrement())

  campaign            Campaign     @relation(fields: [campaignId], references: [id])
  campaignId          String

  updateNews          String

  createdDate         DateTime     @default(now())
}

// Note: Waiting for Midtrans
// model Donation {
//   id                  Int          @id @default(autoincrement())

      
// }